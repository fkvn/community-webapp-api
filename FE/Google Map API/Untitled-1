// In this example, we center the map, and add a marker, using a LatLng object
// literal instead of a google.maps.LatLng object. LatLng object literals are
// a convenient way to add a LatLng coordinate and, in most cases, can be used
// in place of a google.maps.LatLng object.

<html>
  <head>
    <title>Lat/Lng Object Literal</title>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <style>
   
    </style>
  </head>
  <body>
    <div id="map"></div>

    <script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg&callback=initMap&v=weekly&channel=2"
      async
    ></script>
  </body>
</html>
/* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
// #map {
//     height: 70%;
//     width: 25%;
//   }
  
//   /* Optional: Makes the sample page fill the window. */
//   html,
//   body {
//     height: 100%;
//     margin: 0;
//     padding: 0;
//   }


let map;s

function initMap() {
 

  const styledMapType = new google.maps.StyledMapType(
    [{
        "featureType": "administrative",
        "elementType": "geometry",
        "stylers": [{
          "visibility": "off"
        }]
      },
      {
        "featureType": "administrative.land_parcel",
        "elementType": "labels",
        "stylers": [{
          "visibility": "off"
        }]
      },
      {
        "featureType": "administrative.neighborhood",
        "stylers": [{
          "visibility": "off"
        }]
      },
      {
        "featureType": "poi",
        "stylers": [{
          "visibility": "off"
        }]
      },
      {
        "featureType": "poi",
        "elementType": "labels.text",
        "stylers": [{
          "visibility": "off"
        }]
      },
      {
        "featureType": "road",
        "elementType": "labels.icon",
        "stylers": [{
          "visibility": "off"
        }]
      },
      {
        "featureType": "road.local",
        "elementType": "labels",
        "stylers": [{
          "visibility": "off"
        }]
      },
      {
        "featureType": "transit",
        "stylers": [{
          "visibility": "off"
        }]
      }
    ], {
      name: "Styled Map"
    }
  );

  const shape = {
    coords: [1, 1, 1, 20, 18, 20, 18, 1],
    type: "poly",
  };

  const image = [{
      url: "https://firebasestorage.googleapis.com/v0/b/cngo-e17bb.appspot.com/o/WechatIMG84.png?alt=media&token=311fff19-0b1f-4108-ada0-595ad3e4d9ff",
      // This marker is 20 pixels wide by 32 pixels high.
      scaledSize: new google.maps.Size(30, 37),
      // The origin for this image is (0, 0).
      origin: new google.maps.Point(0, 0),
      // The anchor for this image is the base of the flagpole at (0, 32).
      anchor: new google.maps.Point(0, 37),
    },
    {
      url: "https://firebasestorage.googleapis.com/v0/b/cngo-e17bb.appspot.com/o/WechatIMG83.png?alt=media&token=c0342c1c-7eb9-4dc8-a953-9338f2606bd7",
      // This marker is 20 pixels wide by 32 pixels high.
      scaledSize: new google.maps.Size(30, 37),
      // The origin for this image is (0, 0).
      origin: new google.maps.Point(0, 0),
      // The anchor for this image is the base of the flagpole at (0, 32).
      anchor: new google.maps.Point(0, 32),
    },
    {
      url: "https://firebasestorage.googleapis.com/v0/b/cngo-e17bb.appspot.com/o/WechatIMG83.png?alt=media&token=c0342c1c-7eb9-4dc8-a953-9338f2606bd7",
      // This marker is 20 pixels wide by 32 pixels high.
      scaledSize: new google.maps.Size(30, 37),
      // The origin for this image is (0, 0).
      origin: new google.maps.Point(0, 0),
      // The anchor for this image is the base of the flagpole at (0, 32).
      anchor: new google.maps.Point(0, 32),
    },
    {
      url: "https://firebasestorage.googleapis.com/v0/b/cngo-e17bb.appspot.com/o/WechatIMG83.png?alt=media&token=c0342c1c-7eb9-4dc8-a953-9338f2606bd7",
      // This marker is 20 pixels wide by 32 pixels high.
      scaledSize: new google.maps.Size(40, 48),
      // The origin for this image is (0, 0).
      origin: new google.maps.Point(0, 0),
      // The anchor for this image is the base of the flagpole at (0, 32).
      anchor: new google.maps.Point(0, 32),
    },
    {
      url: "https://firebasestorage.googleapis.com/v0/b/cngo-e17bb.appspot.com/o/WechatIMG83.png?alt=media&token=c0342c1c-7eb9-4dc8-a953-9338f2606bd7",
      // This marker is 20 pixels wide by 32 pixels high.
      scaledSize: new google.maps.Size(30, 37),
      // The origin for this image is (0, 0).
      origin: new google.maps.Point(0, 0),
      // The anchor for this image is the base of the flagpole at (0, 32).
      anchor: new google.maps.Point(0, 32),
    }
  ];

 const center = [34.0775513, -118.2889369];
 
  var mapOptions = {
    zoom: 10,
    center: {
      lat: center[0],
      lng: center[1]
    },
    mapTypeControlOptions: {
      mapTypeIds: ["roadmap", "satellite", "hybrid", "terrain", "styled_map"],
    },
  };

  map = new google.maps.Map(document.getElementById("map"), mapOptions);

  const infowindow = new google.maps.InfoWindow();
  var bounds = new google.maps.LatLngBounds();


  /* const centerId = ChIJUzOYWV3HwoAR9kSepVTqvK0 */

  const locations = [
    [34.0775513, -118.2889369],
    [34.0823293, -118.3238559],
    [34.1015790240342, -118.32933737473091],
    [34.1014734, -118.3011674],
    [34.1014399, -118.3028768]
  ]
  
  if (locations.length > 0) {
    for (i = 0; i < locations.length; i++) {
      var marker = new google.maps.Marker({
        position: new google.maps.LatLng(locations[i][0], locations[i][1]),
        icon: image[i],
        optimized: true,
        map: map,
      });

      //extend the bounds to include each marker's position
      bounds.extend(marker.position);

    }

    map.fitBounds(bounds);
    //now fit the map to the newly inclusive bounds    
    map.panToBounds(bounds);


  }

  var listener = google.maps.event.addListener(map, "idle", function() {
    if (map.getZoom() > 16) map.setZoom(16);
    google.maps.event.removeListener(listener);
  });
  
  
  map.mapTypes.set("styled_map", styledMapType);
  map.setMapTypeId("styled_map");
}



